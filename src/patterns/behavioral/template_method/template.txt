    Шаблонный метод — это поведенческий паттерн проектирования, который определяет скелет алгоритма, перекладывая
ответственность за некоторые его шаги на подклассы. Паттерн позволяет подклассам переопределять шаги алгоритма, не меняя
его общей структуры.

Аналогия из жизни:
    Строители используют подход, похожий на шаблонный метод при строительстве типовых домов. У них есть основной
архитектурный проект, в котором расписаны шаги строительства: заливка фундамента, постройка стен, перекрытие крыши,
установка окон и так далее.
    Но, несмотря на стандартизацию каждого этапа, строители могут вносить небольшие изменения на любом из этапов, чтобы
сделать дом чуточку непохожим на другие.

Применимость:
    *)Когда подклассы должны расширять базовый алгоритм, не меняя его структуры.
    *)Когда у вас есть несколько классов, делающих одно и то же с незначительными отличиями. Если вы редактируете один
класс, то приходится вносить такие же правки и в остальные классы.

Шаги реализации:
1)Изучите алгоритм и подумайте, можно ли его разбить на шаги. Прикиньте, какие шаги будут стандартными для всех вариаций
алгоритма, а какие — изменяющимися.
2)Создайте абстрактный базовый класс. Определите в нём шаблонный метод. Этот метод должен состоять из вызовов шагов
алгоритма. Имеет смысл сделать шаблонный метод финальным, чтобы подклассы не могли переопределить его.
3)Добавьте в абстрактный класс методы для каждого из шагов алгоритма. Вы можете сделать эти методы абстрактными или
добавить какую-то реализацию по умолчанию. В первом случае все подклассы должны будут реализовать эти методы, а во
втором — только если реализация шага в подклассе отличается от стандартной версии.
4)Создайте конкретные классы, унаследовав их от абстрактного класса. Реализуйте в них все недостающие шаги и хуки.


Преимущества:
    Облегчает повторное использование кода.

Недостатки:
     Вы жёстко ограничены скелетом существующего алгоритма.
     С ростом количества шагов шаблонный метод становится слишком сложно поддерживать.

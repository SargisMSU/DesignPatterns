    Хорошие программы обычно структурированы в виде слоёв. Самый распространённый пример — слои пользовательского
интерфейса и бизнес-логики. Первый всего лишь рисует красивую картинку для пользователя. Но когда нужно сделать
что-то важное, интерфейс «просит» слой бизнес-логики заняться этим.


    В реальности это выглядит так: один из объектов интерфейса напрямую вызывает метод одного из объектов бизнес-логики,
передавая в него какие-то параметры.

    Паттерн Команда предлагает больше не отправлять такие вызовы напрямую. Вместо этого каждый вызов, отличающийся от
других, следует завернуть в собственный класс с единственным методом, который и будет осуществлять вызов. Такие
объекты называют командами.

    К объекту интерфейса можно будет привязать объект команды, который знает, кому и в каком виде следует отправлять
запросы. Когда объект интерфейса будет готов передать запрос, он вызовет метод команды, а та — позаботится обо всём
остальном.


После применения Команды в нашем примере с текстовым редактором вам больше не потребуется создавать уйму подклассов
кнопок под разные действия. Будет достаточно единственного класса с полем для хранения объекта команды.

Используя общий интерфейс команд, объекты кнопок будут ссылаться на объекты команд различных типов. При нажатии кнопки
будут делегировать работу связанным командам, а команды — перенаправлять вызовы тем или иным объектам бизнес-логики.

Так же можно поступить и с контекстным меню, и с горячими клавишами. Они будут привязаны к тем же объектам команд, что
и кнопки, избавляя классы от дублирования.

Таким образом, команды станут гибкой прослойкой между пользовательским интерфейсом и бизнес-логикой. И это лишь малая
доля пользы, которую может принести паттерн Команда!




Аналогия из жизни
Пример заказа в ресторане
Вы заходите в ресторан и садитесь у окна. К вам подходит вежливый официант и принимает заказ, записывая все пожелания в
блокнот. Откланявшись, он уходит на кухню, где вырывает лист из блокнота и клеит на стену. Далее лист оказывается в
руках повара, который читает содержание заказа и готовит заказанные блюда.
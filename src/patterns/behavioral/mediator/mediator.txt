  Посредник — это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между
собой, благодаря перемещению этих связей в один класс-посредник.

Проблема
Предположим, что у вас есть диалог создания профиля пользователя. Он состоит из всевозможных элементов управления —
текстовых полей, чекбоксов, кнопок.
    Отдельные элементы диалога должны взаимодействовать друг с другом. Так, например, чекбокс «у меня есть собака»
открывает скрытое поле для ввода имени домашнего любимца, а клик по кнопке отправки запускает проверку значений всех
полей формы.
 Прописав эту логику прямо в коде элементов управления, вы поставите крест на их повторном использовании в других местах
приложения. Они станут слишком тесно связанными с элементами диалога редактирования профиля, которые не нужны в других
контекстах. Поэтому вы сможете использовать либо все элементы сразу, либо ни одного.

Решение
    Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник, который
знает, кому нужно перенаправить тот или иной запрос. Благодаря этому, компоненты системы будут зависеть только от
посредника, а не от десятков других компонентов.


 Аналогия из жизни: Пилоты садящихся или улетающих самолётов не общаются напрямую с другими пилотами. Вместо этого они
связываются с диспетчером, который координирует действия нескольких самолётов одновременно. Без диспетчера пилотам
приходилось бы все время быть начеку и следить за всеми окружающими самолётами самостоятельно, а это приводило бы к
частым катастрофам в небе.

Применимость
 *) Когда вам сложно менять некоторые классы из-за того, что они имеют множество хаотичных связей с другими классами.
 *) Когда вы не можете повторно использовать класс, поскольку он зависит от уймы других классов.
 *) Когда вам приходится создавать множество подклассов компонентов, чтобы использовать одни и те же компоненты в разных
  контекстах.


Шаги реализации
1)Найдите группу тесно переплетённых классов, отвязав которые друг от друга, можно получить некоторую пользу. Например,
чтобы повторно использовать их код в другой программе.
2)Создайте общий интерфейс посредников и опишите в нём методы для взаимодействия с компонентами. В простейшем случае
остаточно одного метода для получения оповещений от компонентов.
3)Этот интерфейс необходим, если вы хотите повторно использовать классы компонентов для других задач. В этом случае всё,
что нужно сделать — это создать новый класс конкретного посредника.
4)Реализуйте этот интерфейс в классе конкретного посредника. Поместите в него поля, которые будут содержать ссылки на
все объекты компонентов.
5)Вы можете пойти дальше и переместить код создания компонентов в класс посредника, после чего он может напоминать
фабрику или фасад.
6)Компоненты тоже должны иметь ссылку на объект посредника. Связь между ними удобнее всего установить, подавая
посредника в параметры конструктора компонентов.
7)Измените код компонентов так, чтобы они вызывали метод оповещения посредника, вместо методов других компонентов.
С противоположной стороны, посредник должен вызывать методы нужного компонента, когда получает оповещение от компонента.
